module.exports = function (grunt) {
    var config = require("./config.js");

<<<<<<< HEAD
    var testsOutput = "";

    if (process.env._NTTREE) {
        outputFolder = process.env._NTTREE + "/Corsica/";
        testsOutput = outputFolder + "other." + version + ".debug/tests/unittests/";
    } else {
        testsOutput = outputFolder + "tests/";
    }

    var targetName = "WinJS." + version;
    var targetFramework = "Microsoft.WinJS.2.1";
    var desktopOutput = outputFolder + "Microsoft." + targetName + "/";
    var phoneOutput = outputFolder + "Microsoft.Phone." + targetName + "/";

    var baseJSFiles = [
        "src/js/build/Copyright.js",
        "src/js/build/writeProfilerMark.js",
        "src/js/build/startbase.js",
        "src/js/base/references.js",
        "src/js/base/base.js",
        "src/js/base/baseutils.js",
        "src/js/base/log.js",
        "src/js/base/events.js",
        "src/js/base/resources.js",
        "src/js/base/promise.js",
        "src/js/base/scheduler.js",
        "src/js/base/errors.js",
        "src/js/base/xhr.js",
        "src/js/base/safehtml.js",
        "src/js/base/getwinjsstring.js",
        "src/js/base/dispose.js",

        "src/js/ui/control.js",
        "src/js/ui/declarativecontrols.js",
        "src/js/ui/elementlistutilities.js",
        "src/js/ui/elementutilities.js",
        "src/js/ui/fragmentcontrol.js",
        "src/js/ui/fragmentloader.js",
        "src/js/ui/optionslexer.js",
        "src/js/ui/optionsparser.js",
        "src/js/ui/tabmanager.js",
        "src/js/ui/transitionanimation.js",
        "src/js/ui/utilities.js",

        "src/js/wwa-app/application.js",
        "src/js/wwa-app/navigation2.js",
        "src/js/wwa-app/state.js",

        "src/js/binding/bindingparser.js",
        "src/js/binding/data.js",
        "src/js/binding/datatemplate.js",
        "src/js/binding/declarative.js",
        "src/js/binding/domweakreftable.js",
        "src/js/binding/list.js",
        "src/js/binding/datatemplatecompiler.js",

        "src/js/res/res.js",

        "src/js/build/endbase.js"
    ];

    var baseJSFilesPhone = [
        "src/js/startBase.js",
        "src/js/base/references.js",
        "src/js/base/base.js",
        "src/js/base/baseUtils.js",
        "src/js/base/baseUtils-phone.js",
        "src/js/base/log.js",
        "src/js/base/events.js",
        "src/js/base/resources.js",
        "src/js/base/promise.js",
        "src/js/base/scheduler.js",
        "src/js/base/errors.js",
        "src/js/base/xhr.js",
        "src/js/base/safeHTML.js",
        "src/js/base/getWintsString.js",
        "src/js/base/dispose.js",

        "src/js/ui/control.js",
        "src/js/ui/declarativeControls.js",
        "src/js/ui/elementListUtilities.js",
        "src/js/ui/elementUtilities.js",
        "src/js/ui/fragmentControl.js",
        "src/js/ui/fragmentLoader.js",
        "src/js/ui/optionsLexer.js",
        "src/js/ui/optionsParser.js",
        "src/js/ui/tabManager.js",
        "src/js/ui/transitionAnimation.js",
        "src/js/ui/utilities.js",

        "src/js/wwa-app/application.js",
        "src/js/wwa-app/navigation2.js",
        "src/js/wwa-app/state.js",

        "src/js/binding/bindingParser.js",
        "src/js/binding/data.js",
        "src/js/binding/dataTemplate.js",
        "src/js/binding/declarative.js",
        "src/js/binding/DOMWeakRefTable.js",
        "src/js/binding/list.js",
        "src/js/binding/dataTemplateCompiler.js",

        "src/js/res/Res.js",

        "src/js/endBase.js"
    ];
=======
    // Make sure that Grunt doesn't remove BOM from our utf8 files
    // on read
    grunt.file.preserveBOM = true;
>>>>>>> master

    // Helper function to load the config file
    function loadConfig(path) {
      var glob = require('glob');
      var object = {};
      var key;

      glob.sync('*', {cwd: path}).forEach(function(option) {
        key = option.replace(/\.js$/,'');
        object[key] = require(path + option);
      });

      return object;
    }

    // Load task options
    var gruntConfig = loadConfig('./tasks/options/');

    // Package data
    gruntConfig.pkg = grunt.file.readJSON("package.json");

<<<<<<< HEAD
    // Clean task
    gruntConfig.clean = {
        options: {
            force: true
        },
        all: [
            desktopOutput,
            phoneOutput,
            testsOutput
        ],
        base: [
            desktopOutput + "js/base.js",
            desktopOutput + "js/" + localeFolder + "/base.strings.js",
            phoneOutput + "js/base.js",
            phoneOutput + "js/" + localeFolder + "/base.strings.js",
        ],
        ui: [
            desktopOutput + "js/ui.js",
            desktopOutput + "js/" + localeFolder + "/ui.strings.js",
            phoneOutput + "js/ui.js",
            phoneOutput + "js/" + localeFolder + "/ui.strings.js",
        ],
        test: [
            testsOutput + "**/*.js",
            testsOutput + "**/*.html",
        ],
        qunit: [
            testsOutput + "TestLib/liveToQ/*.*"
        ],
    };

    // Less build task
    gruntConfig.less = {
        desktopDark: {
            src: ["src/less/desktop-dark.less"],
            dest: desktopOutput + "css/ui-dark.css"
        },
        desktopLight: {
            src: ["src/less/desktop-light.less"],
            dest: desktopOutput + "css/ui-light.css"
        },
        phoneDark: {
            src: ["src/less/phone-dark.less"],
            dest: phoneOutput + "css/ui-dark.css"
        },
        phoneLight: {
            src: ["src/less/phone-light.less"],
            dest: phoneOutput + "css/ui-light.css"
        },
    };

    // Javascript concat task
    gruntConfig.concat = {
        baseDesktop: {
            src: baseJSFiles,
            dest: desktopOutput + "js/base.js"
        },
        basePhone: {
            src: baseJSFilesPhone,
            dest: phoneOutput + "js/base.js"
        },
        baseStringsDesktop: {
            src: baseStringsFiles,
            dest: desktopOutput + "js/" + localeFolder + "/base.strings.js"
        },
        baseStringsPhone: {
            src: baseStringsFiles,
            dest: phoneOutput + "js/" + localeFolder + "/base.strings.js"
        },
        uiDesktop: {
            src: uiJSFiles,
            dest: desktopOutput + "js/ui.js"
        },
        uiPhone: {
            src: uiJSFilesPhone,
            dest: phoneOutput + "js/ui.js"
        },
        uiStringsDesktop: {
            src: uiStringsFiles,
            dest: desktopOutput + "js/" + localeFolder + "/ui.strings.js"
        },
        uiStringsPhone: {
            src: uiStringsFiles,
            dest: phoneOutput + "js/" + localeFolder + "/ui.strings.js"
        }
    };

    // Post process task
    gruntConfig.replace = {
        tests: {
            options: {
                patterns: [
                    {
                        match: "TESTPAGE_HEAD",
                        replacement: "<%= grunt.file.read('tests/TestLib/liveToQ/testPageHead.html') %>"
                    },
                    {
                        match: "TESTPAGE_BODY",
                        replacement: "<%= grunt.file.read('tests/TestLib/liveToQ/testPageBody.html') %>"
                    }
                ],
            },
            files: [
                { expand: true, flatten: false, src: [testsOutput + "**/*.js"], dest: "" },
                { expand: true, flatten: false, src: [testsOutput + "**/*.html"], dest: "" },
            ]
        },
        base: {
            options: {
                patterns: [
                    {
                        match: /\$\(TARGET_DESTINATION\)/g,
                        replacement: targetName
                    },
                    {
                        match: /\$\(TargetFramework\)/g,
                        replacement: targetFramework
                    },
                    {
                        match: /\$\(build.version\)/g,
                        replacement: "<%= pkg.version %>"
                    },
                    {
                        match: /\$\(build.date\)/g,
                        replacement: buildDateString
                    },
                    {
                        match: /\$\(build.branch\)/g,
                        replacement: "<%= pkg.name %>"
                    }
                ]
            },
            files: [
              { expand: true, flatten: true, src: [desktopOutput + "js/*.js"], dest: desktopOutput + "js/" },
              { expand: true, flatten: true, src: [desktopOutput + "js/" + localeFolder + "/*.js"], dest: desktopOutput + "js/" + localeFolder + "/" },
              { expand: true, flatten: true, src: [phoneOutput + "js/*.js"], dest: phoneOutput + "js/" },
              { expand: true, flatten: true, src: [phoneOutput + "js/" + localeFolder + "/*.js"], dest: phoneOutput + "js/" + localeFolder + "/" },
              { expand: true, flatten: false, src: [testsOutput + "**/*.html"], dest: "" },
            ]
        },
    };

   gruntConfig.copy = {
        tests: {
            files: [
                {expand: true, cwd: "tests/", src: ["**"], dest: testsOutput}
            ]
        }
    };
    
    if (process.env._NTTREE) {
        gruntConfig.shell = {
            runTests: {
                command: function (test, host) {
                    return "%_NTTREE%/Corsica/other.2.1.debug/Tools/WebUnit/WebUnit.exe /s:%_NTTREE%/Corsica/other." + version + ".debug/Tests/UnitTests/" + test + (host ? " /host:" + host : "") + " @res.txt"
                },
                options: {
                    stdout: true,
                    stderr: true
                }
            }
        };
        gruntConfig.replace.tests.options.patterns.push({
            match: /\$\(TESTDATA\)\//g,
            replacement: ""
        });

        // Also add tests to the replace task
        var testReplace = {expand: true, cwd: testsOutput, src: ["**/*.js"], dest: testsOutput};
        gruntConfig.replace.base.files.push(testReplace);
        grunt.log.write("replace has " + gruntConfig.replace.base.files.length + " items");
    } else {
        gruntConfig.replace.tests.options.patterns.push({
            match: /\$\(TESTDATA\)\//g,
            replacement: "../TestData/"
        });
    }

=======
>>>>>>> master
    // Project config
    grunt.initConfig(gruntConfig);

    // Load all grunt-tasks in package.json
    require("load-grunt-tasks")(grunt);

<<<<<<< HEAD
    var defaultTask = ["clean", "less", "concat", "copy", "replace"];
    if (process.env._NTTREE) {
        grunt.registerTask("test", function (test, host) {
            var testArgs =  test || "*.js";

            if (host) {
                host = host.toLowerCase();
                if (host === "vs") {
                    testArgs += " /vs";
                    host = "";
                }
            } else {
                host = "wwa";
            }

            grunt.task.run(["default", "clean:qunit", "shell:runTests:" + testArgs + ":" + host]);
        });
    }
=======
    // Register external tasks
    grunt.loadTasks("tasks/");
>>>>>>> master

    // Task alias's
    grunt.registerTask("default", ["clean", "less", "concat", "copy", "replace"]);
    grunt.registerTask("css", ["less"]);
    grunt.registerTask("base", ["clean:base", "concat:baseDesktop", "concat:basePhone", "concat:baseStringsDesktop", "concat:baseStringsPhone", "replace"]);
    grunt.registerTask("ui", ["clean:ui", "concat:uiDesktop", "concat:uiPhone", "concat:uiStringsDesktop", "concat:uiStringsPhone", "replace", "less"]);
}